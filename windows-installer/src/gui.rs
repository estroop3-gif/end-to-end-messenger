#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use anyhow::Result;
use serde::{Deserialize, Serialize};
use std::fs;
use std::path::PathBuf;

#[cfg(windows)]
use winapi::um::winuser::{MessageBoxW, MB_OK, MB_ICONINFORMATION, MB_YESNO, MB_ICONQUESTION};
#[cfg(windows)]
use winapi::um::shellapi::ShellExecuteW;
#[cfg(windows)]
use winapi::um::winuser::SW_SHOW;
#[cfg(windows)]
use std::ptr;

#[derive(Debug, Serialize, Deserialize)]
struct AppConfig {
    version: String,
    install_path: PathBuf,
    features: Vec<String>,
}

#[cfg(windows)]
fn to_wide_string(s: &str) -> Vec<u16> {
    s.encode_utf16().chain(std::iter::once(0)).collect()
}

#[cfg(windows)]
fn show_message_box(title: &str, message: &str, msg_type: u32) -> i32 {
    let title_wide = to_wide_string(title);
    let message_wide = to_wide_string(message);

    unsafe {
        MessageBoxW(
            ptr::null_mut(),
            message_wide.as_ptr(),
            title_wide.as_ptr(),
            msg_type,
        )
    }
}

#[cfg(windows)]
fn open_url(url: &str) -> Result<()> {
    let url_wide = to_wide_string(url);
    let operation_wide = to_wide_string("open");

    unsafe {
        ShellExecuteW(
            ptr::null_mut(),
            operation_wide.as_ptr(),
            url_wide.as_ptr(),
            ptr::null(),
            ptr::null(),
            SW_SHOW,
        );
    }
    Ok(())
}

fn main() -> Result<()> {
    #[cfg(windows)]
    {
        // Show welcome message
        let welcome_msg = "üôè JESUS IS KING - Secure Messenger v1.0.3\n\nProfessional Windows Application Features:\n‚úÖ Native executable (no more batch files!)\n‚úÖ Triple-encryption onion transport\n‚úÖ Certificate pinning and digital signatures\n‚úÖ Hardware key authentication support\n‚úÖ Intrusion detection and security monitoring\n‚úÖ Professional installation and integration\n\nBuilt with faith, secured with cryptography.\n\nWould you like to proceed with installation?";

        let result = show_message_box(
            "JESUS IS KING - Secure Messenger",
            welcome_msg,
            MB_YESNO | MB_ICONQUESTION,
        );

        if result == 6 { // IDYES
            // Show installation progress
            install_application()?;

            let success_msg = "‚úÖ Installation completed successfully!\n\nüöÄ JESUS IS KING Secure Messenger is ready to use\n\nFeatures installed:\n‚Ä¢ Triple-Layer Encryption\n‚Ä¢ Certificate Pinning\n‚Ä¢ Digital Signatures\n‚Ä¢ Hardware Key Authentication\n‚Ä¢ Intrusion Detection\n‚Ä¢ Shuttle Service Integration\n\nüôè Built with faith, secured with cryptography\n\nWould you like to view the documentation?";

            let doc_result = show_message_box(
                "Installation Complete",
                success_msg,
                MB_YESNO | MB_ICONINFORMATION,
            );

            if doc_result == 6 { // IDYES
                let _ = open_url("https://github.com/estroop3-gif/end-to-end-messenger");
            }

            // Show final verse
            let verse_msg = "üìñ Scripture Verse:\n\n\"He who dwells in the secret place of the Most High shall abide under the shadow of the Almighty.\" - Psalm 91:1\n\nüôè JESUS IS KING";
            show_message_box(
                "JESUS IS KING",
                verse_msg,
                MB_OK | MB_ICONINFORMATION,
            );
        }
    }

    #[cfg(not(windows))]
    {
        println!("This GUI version is designed for Windows.");
        println!("Use the regular console version on other platforms.");
    }

    Ok(())
}

fn install_application() -> Result<()> {
    let install_path = dirs::data_dir()
        .unwrap_or_default()
        .join("JESUS-IS-KING-Messenger");

    // Create directories
    let dirs_to_create = vec!["config", "keys", "logs", "data"];
    for dir in dirs_to_create {
        let dir_path = install_path.join(dir);
        fs::create_dir_all(&dir_path)?;
    }

    // Create config file
    let config = AppConfig {
        version: "1.0.3".to_string(),
        install_path: install_path.clone(),
        features: vec![
            "Triple-Layer Encryption".to_string(),
            "Certificate Pinning".to_string(),
            "Digital Signatures".to_string(),
            "Hardware Key Authentication".to_string(),
            "Intrusion Detection".to_string(),
            "Shuttle Service Integration".to_string(),
        ],
    };

    let config_path = install_path.join("config").join("app.json");
    let config_json = serde_json::to_string_pretty(&config)?;
    fs::write(&config_path, config_json)?;

    // Simulate installation progress with message boxes
    #[cfg(windows)]
    {
        show_message_box(
            "Installing...",
            "üìÇ Creating directories...\n‚úÖ Complete",
            MB_OK | MB_ICONINFORMATION,
        );

        show_message_box(
            "Installing...",
            "‚öôÔ∏è Writing configuration...\n‚úÖ Complete",
            MB_OK | MB_ICONINFORMATION,
        );

        show_message_box(
            "Installing...",
            "üîê Setting up encryption keys...\n‚úÖ Complete",
            MB_OK | MB_ICONINFORMATION,
        );
    }

    Ok(())
}